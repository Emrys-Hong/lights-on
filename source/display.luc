module display #(ROW=1, COL=6)(
    input clk,  // clock
    input rst,  // reset
    input data[ROW][COL][3], // (row, col, led_state)
    input mask[ROW][COL][1],
    input init[ROW][COL][2],
    output out[ROW]
  ) {
  
  // enum for different led_states
//  const LED_OFF = 0;          // 000
//  const LED_0 = 2;            // 010
//  const LED_1 = 3;            // 011
//  const LED_OFF_SELECTED = 4; // 100
//  const LED_0_SELECTED = 6;   // 110
//  const LED_1_SELECTED = 5;   // 101
//  const NO_TOGGLE = 1;        // stealing spare numbers
  
  // TESTING CREATION OF led_state
  const LED_0 = 0;    //000
  const LED_1 = 1;    //001
  const LED_2 = 2;    //010
  const LED_3 = 3;    //011
  const LED_4 = 4;    //100
  const LED_5 = 5;    //101
  const LED_6 = 6;    //110
  const LED_7 = 7;    //111
  
  // preset colours (in GRB)
  const COLOR_BLACK = 24h0;
  //const COLOR_0 = c{8he5, 8h42, 8hf4};  // sky blue
  const COLOR_1 = c{8haa, 8h42, 8hf4};  // blue
  const COLOR_2 = c{8h65, 8h42, 8hf4};  // dark blue
  const COLOR_3 = c{8h42, 8h5f, 8hf4};  // lighter purple
  const COLOR_4 = c{8h42, 8h9e, 8hf4};  // darker purple
  const COLOR_5 = c{8h42, 8hf4, 8hf4};  // pink
  const COLOR_6 = c{8h42, 8hf4, 8h92};  // rose
  const COLOR_7 = c{8h42, 8hf4, 8h42};  // red (last stage!)
  
  dff board[ROW][COL][3](.clk(clk), .rst(rst)); // stores the current board state like a register
  dff counter[14](.clk(clk), .rst(rst)); // 1 complete cycle of counter corresponds to 1 row
  sig foo[11]; // temp variable to store (n % 1536), which yields the column to be rendered
  sig led_state[3]; // temp variable to store state of chosen individual LED
  sig grb[24]; // temp variable to store the GRB values for LED given its led_state
  
  var r, c; // for-loop counters

  always {
    out = 8b0;
    // update board
    for (r=0; r<ROW; r++) for (c=0; c<COL; c++) board.d[r][c] = c{mask[r][c][0], data[r][c]}; // refer to bit pattern for led_states
    // render display
    for (r=0; r<ROW; r++) {
      if (counter.q < 64*24*8) { // if not within the "rest" block - there is data to be sent
        c = counter.q/(64*24); // counter.q/(64*24) == column number - obtains led_state for given (row, col)
        led_state = board.q[r][c];
        case (led_state) {
          //LED_OFF: grb = COLOR_BLACK;
          //LED_0: grb = COLOR_0;
          //LED_1: grb = COLOR_1;
          //LED_OFF_SELECTED: grb = COLOR_2;
          //LED_0_SELECTED: grb = COLOR_3;
          //LED_1_SELECTED: grb = COLOR_4;
          //NO_TOGGLE: grb = COLOR_5;
          
          LED_0: grb = COLOR_BLACK;
          LED_1: grb = COLOR_1;
          LED_2: grb = COLOR_2;
          LED_3: grb = COLOR_3;
          LED_4: grb = COLOR_4;
          LED_5: grb = COLOR_5;
          LED_6: grb = COLOR_6;
          LED_7: grb = COLOR_7;
          default: grb = COLOR_BLACK;
        }
        // this section deals with whether a cell is part of the original initial board
        if (init[r][c]!=2b0) { // if part of original board: show different red/green instead
          if (led_state == LED_0) grb = COLOR_6;
          else if (led_state == LED_1) grb = COLOR_7;
        }
        
        foo = counter.q - ((counter.q/(64*24))*(64*24)); // gets the current block of 1536 - 1536 clocks corresponds to (64clocks/bit * 8bits/colour * 3colours)
        // this is equivalent to `foo = counter.q % (64*24);`
        // logic 0 - 20 clocks HIGH + 44 clocks LOW
        // logic 1 - 40 clocks HIGH + 24 clocks LOW
        if (grb[23-(foo>>6)] == 0) { // grab the corresponding bit out of 24 (bits are retrieved left to right)
          if (foo[5:0] < 20) out[r] = 1; // send a logic 0 by checking current clock in the cycle of the last 64 bits
        }
        else {
          if (foo[5:0] < 40) out[r] = 1; // send a logic 1
        }
      }
      counter.d = counter.q + 1;
    }
  }
}