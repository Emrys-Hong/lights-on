module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel) 
    output avr_rx,          // AVR RX (FPGA)
    
    
    
    
    
    
    
    
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],   // DIP switches on IO Shield
    
    
    
    
    
    
    
    input button0[1],
    input button1[1],
    input button2[1],
    input button3[1],
    input button4[1],
    input button5[1],
    input button6[1],
    input button_reset[1]
    
  ) {
  
  
  
  
  
  
  sig anyButtonPressed[1];
  
  
  
  
  
  
  
  const LED_OFF = 2d0;
  const LED_RED = 2d1;
  const LED_GREEN = 2d2;
  const LED_BLUE = 2d3;
  
  
  
  
  
  
  
  
  

  
  
  
  
  sig rst;                  // reset signal
  .clk(clk) {
    reset_conditioner reset_cond;
    .rst(rst) {
      multi_seven_seg seg;
      counter slowclk(#SIZE(1),#DIV(2));
      beta beta_game;
      
    }
  }
  
  
  
  .clk(slowclk.value) {
    
    
    
    // TO DELETE
    edge_detector edge_detector0(#RISE(1), #FALL(0));
    edge_detector edge_detector1(#RISE(1), #FALL(0));
    edge_detector edge_detector2(#RISE(1), #FALL(0));
    edge_detector edge_detector3(#RISE(1), #FALL(0));
    edge_detector edge_detector4(#RISE(1), #FALL(0));
    edge_detector edge_detector5(#RISE(1), #FALL(0));
    edge_detector edge_detector6(#RISE(1), #FALL(0));
    
    
    
    
    
    
    
    
    
    
    
    
    
    .rst(rst) {
      fsm game_state = {BEGIN, XOR, CMPEQC, ADDC};
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    seg.values = {4h0, 4h0, 4h0, 4h0};
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the
    io_led[2] = 0;   // connect the DIP switches to the LEDs    driver
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    // TO DELETE
    edge_detector0.in = io_button[1];
    edge_detector1.in = io_dip[0][1];
    edge_detector2.in = io_dip[0][2];
    edge_detector3.in = io_dip[0][3];
    edge_detector4.in = io_dip[0][4];
    edge_detector5.in = io_dip[0][5];
    edge_detector6.in = io_dip[0][6];
    io_led[0][0] = beta_game.boardout[0];
    io_led[0][1] = beta_game.boardout[1];
    io_led[0][2] = beta_game.boardout[2];
    io_led[0][3] = beta_game.boardout[3];
    io_led[0][4] = beta_game.boardout[4];
    io_led[0][5] = beta_game.boardout[5];
    io_led[1][0] = beta_game.boardout[6];
    io_led[1][1] = beta_game.boardout[7];
    io_led[1][2] = beta_game.boardout[8];
    io_led[1][3] = beta_game.boardout[9];
    io_led[1][4] = beta_game.boardout[10];
    io_led[1][5] = beta_game.boardout[11];
    
    io_led[0][6] = 0;
    io_led[0][7] = 0;
    io_led[1][6] = 0;
    io_led[1][7] = 0;
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    // connecting beta
    beta_game.board_en = 0;
    beta_game.board_sel = 0;
    beta_game.level_en = 0;
    beta_game.asel = 0;
    beta_game.bsel = 0;
    beta_game.alufn = 0;
    //beta_game.button_press = c{button0, button1, button2, button3, button4, button5, button6};
    // TO DELETE
    beta_game.button_press = c{edge_detector6.out, edge_detector5.out, edge_detector4.out, edge_detector3.out, edge_detector2.out, edge_detector1.out, edge_detector0.out};
    

    
    
    
 
    
    
    
    
    
    
    
    
    
    
    
    
    case(game_state.q) {
      game_state.BEGIN:
        beta_game.board_sel = 1;
        beta_game.board_en = 1;
        beta_game.level_en = 0;
        io_led[2][0] = 1;
        game_state.d = game_state.XOR;
        
        
      game_state.XOR:
        beta_game.board_sel = 0;
        beta_game.board_en = 1;
        beta_game.level_en = 0;
        beta_game.alufn = b010110;
        beta_game.asel = 0;
        beta_game.bsel = 0;
        io_led[2][1] = 1;
        // rmb to change back 3 edge_detector
        beta_game.button_press = c{edge_detector6.out, edge_detector5.out, edge_detector4.out, edge_detector3.out, edge_detector2.out, edge_detector1.out, edge_detector0.out};
        if ( edge_detector0.out|edge_detector1.out|edge_detector2.out|edge_detector3.out|edge_detector4.out|edge_detector5.out|edge_detector6.out){
          game_state.d = game_state.CMPEQC;
        }
      
      game_state.CMPEQC:
        beta_game.board_en = 0;
        beta_game.level_en = 0;
        beta_game.alufn = b110011;
        beta_game.asel = 0;
        beta_game.bsel = 1;
        io_led[2][2] = 1;
        if (beta_game.allon == 1) {
          game_state.d = game_state.ADDC;
        }
        else if (beta_game.allon == 0) {
          game_state.d = game_state.XOR;
        }
        
      
      game_state.ADDC:
        beta_game.board_sel = 1;
        beta_game.board_en = 0;
        beta_game.level_en = 1;
        beta_game.alufn = b000000;
        beta_game.bsel = 2;
        beta_game.asel = 1;
        io_led[2][3] = 1;
        game_state.d = game_state.BEGIN;
        
    }
  }
}