module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel) 
    output avr_rx,          // AVR RX (FPGA)
    
    
    
    
    
    
    
    
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],   // DIP switches on IO Shield
    
    
    
    
    
    
    
    input button0[1],
    input button1[1],
    input button2[1],
    input button3[1],
    input button4[1],
    input button5[1],
    input button6[1],
    input button_reset[1],
    
    
    
    output led_strip,
    output led_strip_1
    
  ) {
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
  
  
  
  sig rst;                  // reset signal
  .clk(clk) {
    reset_conditioner reset_cond;
    .rst(rst) {
      multi_seven_seg seg;
      counter slowclk(#SIZE(1),#DIV(2));
      beta beta_game;
      //ws2812_man ws2812_man;
      //ws2812_man ws2812_man_1;
      display display;
      display display_1;
    }
  }
  
  
  
  .clk(slowclk.value) {
    edge_detector edge_detector0(#RISE(1), #FALL(0));
    edge_detector edge_detector1(#RISE(1), #FALL(0));
    edge_detector edge_detector2(#RISE(1), #FALL(0));
    edge_detector edge_detector3(#RISE(1), #FALL(0));
    edge_detector edge_detector4(#RISE(1), #FALL(0));
    edge_detector edge_detector5(#RISE(1), #FALL(0));
    edge_detector edge_detector6(#RISE(1), #FALL(0));
    button_conditioner conditioner0;
    button_conditioner conditioner1;
    button_conditioner conditioner2;
    button_conditioner conditioner3;
    button_conditioner conditioner4;
    button_conditioner conditioner5;
    button_conditioner conditioner6;
    
    
    
    
    
    
    
    
    
    
    
    
    
    .rst(rst) {
      fsm game_state = {BEGIN, XOR, CMPEQC, ADDC};
    }
  }
  
  
  
  
  
  
  
  
  
  
  
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    led = c{3b0, io_button};  // connect buttons to LEDs
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
    seg.values = {4h0, 4h0, 4h0, 4h0};
    io_seg = ~seg.seg; // connect segments to the driver
    io_sel = ~seg.sel; // connect digit select to the
    io_led[2:0] = 3x{{8h00}};   // connect the DIP switches to the LEDs    driver
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    conditioner0.in = io_dip[2][0];
    edge_detector0.in = conditioner0.out;
    conditioner1.in = io_dip[2][1];
    edge_detector1.in = conditioner1.out;
    conditioner2.in = io_dip[2][2];
    edge_detector2.in = conditioner2.out;
    conditioner3.in = io_dip[2][3];
    edge_detector3.in = conditioner3.out; 
    conditioner4.in = io_dip[2][4];
    edge_detector4.in = conditioner4.out;
    conditioner5.in = io_dip[2][5];
    edge_detector5.in = conditioner5.out;
    conditioner6.in = io_dip[2][6];
    edge_detector6.in = conditioner6.out;
    io_led[0][0] = beta_game.boardout[0];
    io_led[0][1] = beta_game.boardout[1];
    io_led[0][2] = beta_game.boardout[2];
    io_led[0][3] = beta_game.boardout[3];
    io_led[0][4] = beta_game.boardout[4];
    io_led[0][5] = beta_game.boardout[5];
    io_led[1][0] = beta_game.boardout[6];
    io_led[1][1] = beta_game.boardout[7];
    io_led[1][2] = beta_game.boardout[8];
    io_led[1][3] = beta_game.boardout[9];
    io_led[1][4] = beta_game.boardout[10];
    io_led[1][5] = beta_game.boardout[11];
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    display.init[0][0] = 0;display.init[0][1] = 0;display.init[0][2] = 0;display.init[0][3] = 0;display.init[0][4] = 0;display.init[0][5] = 0;
    display.mask[0][0] = 0;display.mask[0][1] = 0;display.mask[0][2] = 0;display.mask[0][3] = 0;display.mask[0][4] = 0;display.mask[0][5] = 0;
    display.data[0][0] = beta_game.boardout[0];
    display.data[0][1] = beta_game.boardout[1];
    display.data[0][2] = beta_game.boardout[2];
    display.data[0][3] = beta_game.boardout[3];
    display.data[0][4] = beta_game.boardout[4];
    display.data[0][5] = beta_game.boardout[5];
    led_strip = display.out;
    
    display_1.init[0][0] = 0;display_1.init[0][1] = 0;display_1.init[0][2] = 0;display_1.init[0][3] = 0;display_1.init[0][4] = 0;display_1.init[0][5] = 0;
    display_1.mask[0][0] = 0;display_1.mask[0][1] = 0;display_1.mask[0][2] = 0;display_1.mask[0][3] = 0;display_1.mask[0][4] = 0;display_1.mask[0][5] = 0;
    display_1.data[0][0] = beta_game.boardout[6];
    display_1.data[0][1] = beta_game.boardout[7];
    display_1.data[0][2] = beta_game.boardout[8];
    display_1.data[0][3] = beta_game.boardout[9];
    display_1.data[0][4] = beta_game.boardout[10];
    display_1.data[0][5] = beta_game.boardout[11];
    led_strip_1 = display_1.out;
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    // connecting beta
    beta_game.board_en = 0;
    beta_game.board_sel = 0;
    beta_game.level_en = 0;
    beta_game.asel = 0;
    beta_game.bsel = 0;
    beta_game.alufn = 0;
    beta_game.button_press = c{edge_detector6.out, edge_detector5.out, edge_detector4.out, edge_detector3.out, edge_detector2.out, edge_detector1.out, edge_detector0.out};
    

    
    
    
 
    
    
    
    
    
    
    
    
    
    
    
    
    case(game_state.q) {
      game_state.BEGIN:
        beta_game.board_sel = 1;
        beta_game.board_en = 1;
        beta_game.level_en = 0;
        io_led[2][0] = 1;
        game_state.d = game_state.XOR;
        
        
      game_state.XOR:
        beta_game.board_sel = 0;
        beta_game.board_en = 1;
        beta_game.level_en = 0;
        beta_game.alufn = b010110;
        beta_game.asel = 0;
        beta_game.bsel = 0;
        io_led[2][1] = 1;
        // rmb to change back 3 edge_detector
        beta_game.button_press = c{edge_detector6.out, edge_detector5.out, edge_detector4.out, edge_detector3.out, edge_detector2.out, edge_detector1.out, edge_detector0.out};
        if ( edge_detector0.out|edge_detector1.out|edge_detector2.out|edge_detector3.out|edge_detector4.out|edge_detector5.out|edge_detector6.out){
          game_state.d = game_state.CMPEQC;
        }
      
      game_state.CMPEQC:
        beta_game.board_en = 0;
        beta_game.level_en = 0;
        beta_game.alufn = b110011;
        beta_game.asel = 0;
        beta_game.bsel = 1;
        io_led[2][2] = 1;
        if (beta_game.allon == 1) {
          game_state.d = game_state.ADDC;
        }
        else if (beta_game.allon == 0) {
          game_state.d = game_state.XOR;
        }
        
      
      game_state.ADDC:
        beta_game.board_sel = 1;
        beta_game.board_en = 0;
        beta_game.level_en = 1;
        beta_game.alufn = b000000;
        beta_game.bsel = 2;
        beta_game.asel = 1;
        io_led[2][3] = 1;
        game_state.d = game_state.BEGIN;
        
    }
  }
}