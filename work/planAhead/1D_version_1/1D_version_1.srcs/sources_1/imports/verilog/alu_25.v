/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_25 (
    input [5:0] io_dip,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_add_out;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [8-1:0] M_add_io_dip;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  add_36 add (
    .io_dip(M_add_io_dip),
    .a(M_add_a),
    .b(M_add_b),
    .out(M_add_out),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_cmp_out;
  reg [8-1:0] M_cmp_io_dip;
  reg [16-1:0] M_cmp_a;
  reg [16-1:0] M_cmp_b;
  cmp_37 cmp (
    .io_dip(M_cmp_io_dip),
    .a(M_cmp_a),
    .b(M_cmp_b),
    .out(M_cmp_out)
  );
  
  wire [16-1:0] M_bol_out;
  reg [6-1:0] M_bol_io_dip;
  reg [16-1:0] M_bol_a;
  reg [16-1:0] M_bol_b;
  bol_38 bol (
    .io_dip(M_bol_io_dip),
    .a(M_bol_a),
    .b(M_bol_b),
    .out(M_bol_out)
  );
  
  wire [16-1:0] M_sft_out;
  reg [8-1:0] M_sft_io_dip;
  reg [16-1:0] M_sft_a;
  reg [16-1:0] M_sft_b;
  sft_39 sft (
    .io_dip(M_sft_io_dip),
    .a(M_sft_a),
    .b(M_sft_b),
    .out(M_sft_out)
  );
  
  wire [16-1:0] M_mul_out;
  reg [8-1:0] M_mul_io_dip;
  reg [16-1:0] M_mul_a;
  reg [16-1:0] M_mul_b;
  mul_40 mul (
    .io_dip(M_mul_io_dip),
    .a(M_mul_a),
    .b(M_mul_b),
    .out(M_mul_out)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_io_dip = io_dip;
    M_cmp_a = a;
    M_cmp_b = b;
    M_cmp_io_dip = io_dip;
    M_bol_a = a;
    M_bol_b = b;
    M_bol_io_dip = io_dip;
    M_sft_a = a;
    M_sft_b = b;
    M_sft_io_dip = io_dip;
    M_mul_a = a;
    M_mul_b = b;
    M_mul_io_dip = io_dip;
    
    case (io_dip[4+1-:2])
      1'h0: begin
        if (io_dip[1+0-:1] == 1'h0) begin
          out = M_add_out;
          z = M_add_z;
          v = M_add_v;
          n = M_add_n;
        end else begin
          out = M_mul_out;
          z = 1'h0;
          v = 1'h0;
          n = 1'h0;
        end
      end
      1'h1: begin
        out = M_bol_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
      2'h2: begin
        out = M_sft_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
      2'h3: begin
        out = M_cmp_out;
        z = 1'h0;
        v = 1'h0;
        n = 1'h0;
      end
    endcase
  end
endmodule
